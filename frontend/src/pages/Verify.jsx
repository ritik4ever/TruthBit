import React, { useState } from 'react';
import { CheckCircle, XCircle, Upload, Shield, ExternalLink } from 'lucide-react';

function Verify() {
    const [file, setFile] = useState(null);
    const [documentHash, setDocumentHash] = useState('');
    const [verifying, setVerifying] = useState(false);
    const [result, setResult] = useState(null);

    const handleFileUpload = async (e) => {
        const uploadedFile = e.target.files[0];
        if (!uploadedFile) return;

        setFile(uploadedFile);
        setResult(null);

        const arrayBuffer = await uploadedFile.arrayBuffer();
        const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

        setDocumentHash(hash);
    };

    const handleVerify = async () => {
        if (!documentHash) return;

        setVerifying(true);
        try {
            const response = await fetch('http://localhost:5000/api/signatures/verify', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ documentHash })
            });

            const data = await response.json();
            setResult(data);
        } catch (error) {
            console.error('Verification failed:', error);
            alert('Verification failed');
        } finally {
            setVerifying(false);
        }
    };

    const downloadCertificate = (signature) => {
        const certificate = `
DOCUMENT SIGNATURE CERTIFICATE
================================

Document Hash: ${documentHash}
Signed By: ${signature.signerName}
Signer Address: ${signature.signerAddress}
Timestamp: ${new Date(signature.timestamp).toLocaleString()}

Blockchain Proof:
Inscription ID: ${signature.inscriptionId}
Transaction ID: ${signature.txid}

This signature is permanently recorded on Bitcoin blockchain.
Verification URL: https://mempool.space/signet/tx/${signature.txid}

Generated by TruthBit - Censorship-Proof Publishing Platform
`;

        const blob = new Blob([certificate], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `signature-certificate-${signature.id}.txt`;
        a.click();
        URL.revokeObjectURL(url);
    };

    return (
        <div className="container" style={{ padding: '40px 24px', maxWidth: '800px' }}>
            <h1 style={{ fontSize: '36px', fontWeight: 700, marginBottom: '12px' }}>
                Verify Document Signature
            </h1>
            <p style={{ color: 'var(--dark-medium)', marginBottom: '40px' }}>
                Check if a document has been cryptographically signed and inscribed on Bitcoin
            </p>

            <div className="card" style={{ marginBottom: '24px' }}>
                <h3 style={{ fontSize: '18px', fontWeight: 600, marginBottom: '20px' }}>
                    Upload Document to Verify
                </h3>

                <div style={{
                    border: '2px dashed var(--border)',
                    borderRadius: '8px',
                    padding: '40px',
                    textAlign: 'center',
                    marginBottom: '20px'
                }}>
                    <Upload size={48} color="var(--dark-medium)" style={{ marginBottom: '16px' }} />
                    <p style={{ marginBottom: '16px', color: 'var(--dark-medium)' }}>
                        Upload the document to check for signatures
                    </p>
                    <input
                        type="file"
                        onChange={handleFileUpload}
                        style={{ display: 'none' }}
                        id="verify-file-upload"
                    />
                    <label htmlFor="verify-file-upload" className="btn-secondary" style={{ cursor: 'pointer' }}>
                        Choose File
                    </label>
                </div>

                {file && (
                    <div style={{
                        background: 'var(--light)',
                        padding: '16px',
                        borderRadius: '8px',
                        marginBottom: '20px'
                    }}>
                        <p style={{ fontWeight: 600, marginBottom: '8px' }}>File Selected:</p>
                        <p style={{ fontSize: '14px', marginBottom: '12px' }}>{file.name}</p>
                        <p style={{ fontWeight: 600, marginBottom: '8px' }}>SHA-256 Hash:</p>
                        <p style={{
                            fontSize: '12px',
                            fontFamily: 'monospace',
                            wordBreak: 'break-all',
                            color: 'var(--dark-medium)'
                        }}>
                            {documentHash}
                        </p>
                    </div>
                )}

                <button
                    className="btn-primary"
                    style={{ width: '100%' }}
                    onClick={handleVerify}
                    disabled={!documentHash || verifying}
                >
                    {verifying ? 'Verifying...' : 'Verify Document'}
                </button>
            </div>

            {result && (
                <div className="card" style={{
                    background: result.verified ? '#E7F5EC' : '#FFF4E6',
                    border: `2px solid ${result.verified ? 'var(--secondary)' : '#FF9500'}`
                }}>
                    <div style={{ display: 'flex', gap: '12px', alignItems: 'flex-start' }}>
                        {result.verified ? (
                            <CheckCircle size={32} color="var(--secondary)" />
                        ) : (
                            <XCircle size={32} color="#FF9500" />
                        )}
                        <div style={{ flex: 1 }}>
                            <h4 style={{ fontWeight: 600, marginBottom: '8px', fontSize: '20px' }}>
                                {result.verified ? 'Document Verified âœ“' : 'No Signatures Found'}
                            </h4>
                            <p style={{ fontSize: '14px', color: 'var(--dark-medium)', marginBottom: '16px' }}>
                                {result.message || `Found ${result.signatures?.length} signature(s)`}
                            </p>

                            {result.verified && result.signatures?.map((sig, index) => (
                                <div key={index} style={{
                                    background: 'white',
                                    padding: '16px',
                                    borderRadius: '8px',
                                    marginBottom: '12px'
                                }}>
                                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '12px' }}>
                                        <div>
                                            <p style={{ fontWeight: 600, marginBottom: '4px' }}>
                                                <Shield size={16} style={{ verticalAlign: 'middle', marginRight: '8px' }} />
                                                {sig.signerName}
                                            </p>
                                            <p style={{ fontSize: '13px', color: 'var(--dark-medium)', marginBottom: '8px' }}>
                                                Signed: {new Date(sig.timestamp).toLocaleString()}
                                            </p>

                                            <div style={{ fontSize: '12px', fontFamily: 'monospace' }}>
                                                <p style={{ marginBottom: '4px' }}>
                                                    Inscription: {sig.inscriptionId.substring(0, 20)}...
                                                </p>

                                                <a
                                                    href={`https://mempool.space/signet/tx/${sig.txid}`}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    style={{ color: 'var(--primary)', textDecoration: 'none' }}
                                                >
                                                    View on Bitcoin <ExternalLink size={12} style={{ verticalAlign: 'middle' }} />
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}

export default Verify;